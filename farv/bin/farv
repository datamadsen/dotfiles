#!/usr/bin/env bash

# System paths
FARV_SYSTEM_DIR="/usr/share/farv"
FARV_SYSTEM_THEMES="$FARV_SYSTEM_DIR/themes"
FARV_SYSTEM_HANDLERS="$FARV_SYSTEM_DIR/handlers"

# User paths (XDG compliant)
FARV_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/farv"
FARV_USER_THEMES="$FARV_CONFIG_HOME/themes"
FARV_USER_HANDLERS="$FARV_CONFIG_HOME/handlers"
FARV_CURRENT_LINK="$FARV_CONFIG_HOME/current"

# Utility functions
log_action() { echo "  - $1"; }
is_running() { pgrep -x "$1" >/dev/null 2>&1; }
has_command() { command -v "$1" >/dev/null 2>&1; }

# Function to discover themes with search priority
discover_themes() {
    local category="$1"  # light or dark
    local themes=()
    local seen_themes=()
    
    # User themes first (higher priority)
    if [ -d "$FARV_USER_THEMES/$category" ]; then
        for theme_dir in "$FARV_USER_THEMES/$category"/*/; do
            if [ -d "$theme_dir" ] && [ "$theme_dir" != "$FARV_USER_THEMES/$category/*/" ]; then
                local theme_name=$(basename "$theme_dir")
                themes+=("$theme_name ($category) [user]")
                seen_themes+=("$theme_name")
            fi
        done
    fi
    
    # System themes second (only if not overridden by user)
    if [ -d "$FARV_SYSTEM_THEMES/$category" ]; then
        for theme_dir in "$FARV_SYSTEM_THEMES/$category"/*/; do
            if [ -d "$theme_dir" ] && [ "$theme_dir" != "$FARV_SYSTEM_THEMES/$category/*/" ]; then
                local theme_name=$(basename "$theme_dir")
                # Only add if not already found in user themes
                if [[ ! " ${seen_themes[@]} " =~ " $theme_name " ]]; then
                    themes+=("$theme_name ($category)")
                fi
            fi
        done
    fi
    
    printf '%s\n' "${themes[@]}"
}

# Function to list available themes
list_themes() {
    discover_themes "light"
    discover_themes "dark"
}

# Function to resolve theme path with search priority
resolve_theme_path() {
    local theme_name="$1"
    local category="$2"  # light or dark
    
    # Check user themes first (higher priority)
    local user_path="$FARV_USER_THEMES/$category/$theme_name"
    if [ -d "$user_path" ]; then
        echo "$user_path"
        return 0
    fi
    
    # Fall back to system themes
    local system_path="$FARV_SYSTEM_THEMES/$category/$theme_name"
    if [ -d "$system_path" ]; then
        echo "$system_path"
        return 0
    fi
    
    return 1
}

# Function to find theme path
find_theme_path() {
    local theme_input="$1"
    local theme_name theme_path

    # Check if input includes category and user/system indicator
    if [[ "$theme_input" == *" (light) [user]" ]]; then
        theme_name="${theme_input%% \(light\) \[user\]}"
        theme_path="$FARV_USER_THEMES/light/$theme_name"
    elif [[ "$theme_input" == *" (dark) [user]" ]]; then
        theme_name="${theme_input%% \(dark\) \[user\]}"
        theme_path="$FARV_USER_THEMES/dark/$theme_name"
    elif [[ "$theme_input" == *" (light)" ]]; then
        theme_name="${theme_input%% \(light\)}"
        theme_path=$(resolve_theme_path "$theme_name" "light")
    elif [[ "$theme_input" == *" (dark)" ]]; then
        theme_name="${theme_input%% \(dark\)}"
        theme_path=$(resolve_theme_path "$theme_name" "dark")
    else
        # Try to find theme in both light and dark directories, prioritizing user themes
        theme_name="$theme_input"
        theme_path=$(resolve_theme_path "$theme_name" "light")
        if [ -z "$theme_path" ]; then
            theme_path=$(resolve_theme_path "$theme_name" "dark")
        fi
    fi

    echo "$theme_path"
}

# Function to switch theme
switch_theme() {
  local theme_input="$1"
  local theme_path=$(find_theme_path "$theme_input")

  if [ ! -d "$theme_path" ]; then
    echo "Error: Theme '$theme_input' not found"
    echo ""
    list_themes
    return 1
  fi

  # Create user config directory if it doesn't exist
  mkdir -p "$FARV_CONFIG_HOME"

  # Update symlink with absolute path
  rm -f "$FARV_CURRENT_LINK"
  ln -sf "$theme_path" "$FARV_CURRENT_LINK"

  # Run all available handlers with priority system
  execute_handlers "$theme_path"

  local theme_name=$(basename "$theme_path")
  echo "Switched to theme: $theme_name"
}

# Function to discover handlers with user override support
discover_handlers() {
    local handlers=()
    local seen_handlers=()
    
    # Get all available handlers from both locations
    # User handlers first (can override system handlers)
    if [ -d "$FARV_USER_HANDLERS" ]; then
        for handler_path in "$FARV_USER_HANDLERS"/*.sh; do
            if [ -f "$handler_path" ]; then
                local handler_name=$(basename "$handler_path")
                handlers+=("$handler_path")
                seen_handlers+=("$handler_name")
            fi
        done
    fi
    
    # System handlers second (only if not overridden by user)
    if [ -d "$FARV_SYSTEM_HANDLERS" ]; then
        for handler_path in "$FARV_SYSTEM_HANDLERS"/*.sh; do
            if [ -f "$handler_path" ]; then
                local handler_name=$(basename "$handler_path")
                # Only add if not already found in user handlers
                if [[ ! " ${seen_handlers[@]} " =~ " $handler_name " ]]; then
                    handlers+=("$handler_path")
                fi
            fi
        done
    fi
    
    printf '%s\n' "${handlers[@]}"
}

# Function to execute handlers
execute_handlers() {
    local theme_path="$1"
    
    while IFS= read -r handler_path; do
        if [ -f "$handler_path" ] && [ -x "$handler_path" ]; then
            "$handler_path" "$theme_path"
        fi
    done < <(discover_handlers)
}

# Interactive theme selection using fzf
interactive_selection() {
  if has_command fzf; then
    local selected_theme=$(list_themes | fzf --prompt="Select theme: " --height=10 --border)
    if [[ -n "$selected_theme" ]]; then
      switch_theme "$selected_theme"
    fi
  else
    echo "Usage: farv [theme-name|list]"
    echo ""
    list_themes
  fi
}

# Generate zsh completion script
generate_zsh_completion() {
  cat <<'EOF'
#compdef farv

_farv() {
    local context state line
    _arguments \
        '1: :->themes' \
        '*: :->themes'
    
    case $state in
        themes)
            local -a themes
            while IFS= read -r line; do
                themes+=("$line")
            done < <(farv list 2>/dev/null)
            _describe 'themes' themes
            ;;
    esac
}

compdef _farv farv
EOF
}

# Generate bash completion script
generate_bash_completion() {
  cat <<'EOF'
_farv() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    if [[ ${cur} == -* ]]; then
        opts="--help -h --generate-completion list ls"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
    
    local themes=$(farv list 2>/dev/null)
    COMPREPLY=( $(compgen -W "${themes}" -- ${cur}) )
    return 0
}

complete -F _farv farv
EOF
}

# Generate fish completion script
generate_fish_completion() {
  cat <<'EOF'
function __farv_complete_themes
    farv list 2>/dev/null
end

complete -c farv -f -a '(__farv_complete_themes)' -d 'Available themes'
complete -c farv -s l -l list -d 'List available themes'
complete -c farv -l help -d 'Show help'
EOF
}

# Show help information
show_help() {
  cat <<'EOF'
farv - A  friend in rice is a friend that's nice :-)

USAGE:
    farv [THEME]                     Switch to specified theme
    farv                             Interactive theme selection (requires fzf)
    farv list                        List all available themes
    farv --help                      Show this help message
    farv --generate-completion SHELL Generate completion script for shell

EXAMPLES:
    farv rose-pine-dawn              Switch to rose-pine-dawn theme
    farv "tokyonight-night (dark)"   Switch using full theme name with category
    farv list                        Show all available themes
    farv                             Open interactive theme selector

COMPLETION SETUP:
    # Automatic (recommended)
    Run the installer which detects your shell and sets up completion

    # Manual setup
    farv --generate-completion zsh > ~/.local/share/zsh/site-functions/_farv
    farv --generate-completion bash > ~/.bash_completion.d/farv
    farv --generate-completion fish > ~/.config/fish/completions/farv.fish
EOF
}

# Main logic
case "${1:-}" in
"--help" | "-h")
  show_help
  ;;
"--generate-completion")
  case "${2:-}" in
  "zsh") generate_zsh_completion ;;
  "bash") generate_bash_completion ;;
  "fish") generate_fish_completion ;;
  *)
    echo "Usage: farv --generate-completion {zsh|bash|fish}"
    exit 1
    ;;
  esac
  ;;
"list" | "ls")
  list_themes
  ;;
"")
  interactive_selection
  ;;
*)
  switch_theme "$1"
  ;;
esac
