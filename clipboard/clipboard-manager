#!/usr/bin/env bash
# clipboard-manager - Enhanced cliphist script with image thumbnail support
# Based on cliphist contrib/cliphist-wofi-img

# set up thumbnail directory
thumb_dir="${XDG_CACHE_HOME:-$HOME/.cache}/cliphist/thumbs"
mkdir -p "$thumb_dir"

cliphist_list="$(cliphist list)"

# delete thumbnails in cache but not in cliphist
for thumb in "$thumb_dir"/*; do
  [ ! -f "$thumb" ] && continue
  clip_id="${thumb##*/}"
  clip_id="${clip_id%.*}"
  check=$(grep -E "^$clip_id\s" <<<"$cliphist_list")
  if [ -z "$check" ]; then
    rm -f "$thumb"
  fi
done

# remove unnecessary image tags
# create thumbnail if image not processed already
# print escape sequence
read -r -d '' prog <<EOF
/^[0-9]+\s<meta http-equiv=/ { next }
match(\$0, /^([0-9]+)\s(\[\[\s)?binary.*(jpg|jpeg|png|bmp)/, grp) {
    image = grp[1]"."grp[3]
    system("[ -f $thumb_dir/"image" ] || echo " grp[1] "\\\\\t | cliphist decode | magick - -resize '256x256>' $thumb_dir/"image )
    print "img:$thumb_dir/"image
    next
}
{
    # Wrap clipboard ID in HTML span for styling
    match(\$0, /^([0-9]+)\s(.*)/, grp)
    clip_id = grp[1]
    content = grp[2]
    print "<span alpha=\"1\">" clip_id "</span> " content
}
EOF

choice=$(gawk <<<"$cliphist_list" "$prog" | wofi \
  --dmenu \
  --style="$XDG_CONFIG_HOME/farv/current/wofi-clipboard.css" \
  --cache-file=/dev/null \
  --allow-images \
  --parse-markup=true \
  -Dimage_size=200 \
  --width=1000 \
  --height=700 \
  --prompt="Clipboard History")

# stop execution if nothing selected in wofi menu
[ -z "$choice" ] && exit 1

if [[ "$choice" == img:* ]]; then
  # For images, extract clipboard ID and find original entry
  clip_id=$(basename "$choice" | cut -d. -f1)
  original_entry=$(grep -E "^${clip_id}[[:space:]]" <<<"$cliphist_list")
  if [ -n "$original_entry" ]; then
    cliphist decode <<<"$original_entry"
  fi
else
  # For text entries, extract clipboard ID from HTML markup
  if [[ "$choice" =~ \<span\ alpha=\"1\"\>([0-9]+)\</span\>\ (.*) ]]; then
    clip_id="${BASH_REMATCH[1]}"
    original_entry=$(grep -E "^${clip_id}[[:space:]]" <<<"$cliphist_list")
    if [ -n "$original_entry" ]; then
      cliphist decode <<<"$original_entry"
    fi
  else
    # Fallback for entries without HTML markup
    cliphist decode <<<"$choice"
  fi
fi | wl-copy && sleep 0.1 && wtype -M shift -k Insert -m shift
