set nocompatible
set encoding=utf8

" use space as leader. I used to use comma as leader, but it's useful for
" navigating
let mapleader = " "

" General
filetype off
call plug#begin('$HOME/.vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary' " Comment stuff out/in
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " Tree explorer
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' } " Markdown
Plug 'godlygeek/tabular', { 'for': 'markdown' } " vim-markdown dependency
Plug 'milkypostman/vim-togglelist' " Location list
Plug 'simeji/winresizer' " Resize windows
Plug 'alvan/vim-closetag', { 'for': 'html' } " Auto-close html tags
Plug 'tpope/vim-surround' " vim-surround
Plug 'itchyny/lightline.vim' " Statusline
Plug 'mhinz/vim-startify' " Startup screen
Plug 'w0rp/ale' " linter and more
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'morhetz/gruvbox' " colors
Plug 'omnisharp/omnisharp-vim' " C# completion
Plug 'christoomey/vim-tmux-navigator' " What it says
Plug 'janko/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'Shougo/echodoc.vim'
Plug 'tmadsen/vim-compiler-plugin-for-dotnet'
Plug 'tmadsen/vim-filetype-settings'
call plug#end()

filetype plugin indent on

syntax on " syntax highlighting on

set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo

" Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=BitstreamVeraSansMonoNerdFontComplete-Roman:h14
else
    set t_Co=256
endif
colorscheme gruvbox
set background=dark
let g:airline_theme='one'
highlight Normal ctermbg=NONE " http://stackoverflow.com/a/18224803/62802
highlight nonText ctermbg=NONE

" Vim UI
set linespace=1
set wildmenu
set ruler
set cmdheight=2
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow
set number
set relativenumber
augroup linenumbers
    autocmd!
    autocmd BufEnter *    :set relativenumber
    autocmd BufLeave *    :set number norelativenumber
    autocmd WinEnter *    :set relativenumber
    autocmd WinLeave *    :set number norelativenumber
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set relativenumber
    autocmd FocusLost *   :set number norelativenumber
    autocmd FocusGained * :set relativenumber
augroup END
nnoremap <silent> <C-S> :<C-u>update<CR>

" Visual Cues
set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set nohlsearch " experimenting with navigating more by search
set colorcolumn=81
set diffopt+=vertical
set cursorline
set mouse=a " Enable mouse in all modes
" set ttymouse=xterm2 " Works with my mintty/tmux setup
set ttyfast " We have a fast terminal connection
set statusline=
set statusline=%F\ "full filepath
" set statusline=%t\ "file name
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

set fo=tcrqnj
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set nowrap
set textwidth=79
set ignorecase
set wildignorecase
set foldmethod=syntax
set autowrite
set smartcase
set cmdheight=2

" Remap commands that I mistype
command! W w
command! Wq wq
command! Q q
command! Qa qa

" Toggle the color column
let g:oldColorColumn = 0
function! ToggleColorColumn()
    if &colorcolumn > '0'
        let g:oldColorColumn=&colorcolumn
        let &colorcolumn=0
    else
        let &colorcolumn=g:oldColorColumn
    endif
endfunction
call ToggleColorColumn()

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>

" use rg for grep
if (executable("rg"))
    set grepprg=rg\ --vimgrep
endif

" Nicer pum color
highlight Pmenu ctermbg=238

" unfold folds on buffer read
autocmd BufRead * normal zR

" madsen leader stuff
map <leader>c :call ToggleColorColumn()<CR> " Esc+c=toggle color column
map <leader>h :set hlsearch! <CR> " toggle search highlighting

" winresizer
let g:winresizer_start_key='<C-T>'

" nerdtree
map <leader>P :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 50
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeIgnore = ['bin', 'obj']

" Better movemment when text is wrapped
function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" automatically wrap quickfix area
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
    autocmd FileType qf setlocal linebreak
augroup END

" Ale
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'typescript': ['tslint'],
            \}

" fzf
nmap <C-P> :FZF<CR>

" vim-test
let g:test#csharp#runner='dotnettest'
let test#strategy = "vimterminal"

" echodoc
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'echo'

" asyncomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

let g:asyncomplete_auto_popup = 1

" function! s:check_back_space() abort
"     let col = col('.') - 1
"     return !col || getline('.')[col - 1]  =~ '\s'
" endfunction

" inoremap <silent><expr> <TAB>
"   \ pumvisible() ? "\<C-n>" :
"   \ <SID>check_back_space() ? "\<TAB>" :
"   \ asyncomplete#force_refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

set completeopt=noinsert,menuone,noselect
let g:asyncomplete_auto_completeopt = 0

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
" \ 'name': 'omni',
" \ 'whitelist': ['*'],
" \ 'blacklist': ['c', 'cpp', 'html'],
" \ 'completor': function('asyncomplete#sources#omni#completor')
" \  }))

" omnisharp-vim
let g:OmniSharp_server_stdio = 1 " Use the stdio OmniSharp-roslyn server
let g:OmniSharp_typeLookupInPreview = 0 " Set the type lookup function to use the preview window instead of echoing it
let g:OmniSharp_timeout = 5 " Timeout in seconds to wait for a response from the server
let g:ale_linters = { 'cs': ['OmniSharp'] } " Tell ALE to use OmniSharp for linting C# files, and no other linters.
let g:OmniSharp_highlight_types = 2 " Update semantic highlighting on BufEnter and InsertLeave
let g:OmniSharp_want_snippet=0
let g:omnicomplete_fetch_full_documentation = 1
