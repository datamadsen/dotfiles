set nocompatible
set encoding=utf8
let mapleader = " "

" {{{ Plugins
filetype off
call plug#begin('$HOME/.vim/plugged')
"{{{cohama/lexima.vim
Plug 'cohama/lexima.vim' " auto close stuff
"}}}
"{{{ fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'
nmap <C-P> :FZF<CR>
nmap <C-_> :Rg<CR>
"}}}
"{{{tpope/vim-fugitive
Plug 'tpope/vim-fugitive' " Git wrapper
"}}}
"{{{tpope/vim-commentary
Plug 'tpope/vim-commentary' " Comment stuff out/in
"}}}
"{{{ preservim/nerdtree
Plug 'preservim/nerdtree'
map <leader>P :NERDTreeToggleVCS<CR>
map <leader>F :NERDTreeFind<CR>
let g:NERDTreeWinSize = 50
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeIgnore = ['bin', 'obj']
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'
"}}}
"{{{plasticboy/vim-markdown
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' } " Markdown
"}}}
"{{{godlygeek/tabular
Plug 'godlygeek/tabular', { 'for': 'markdown' } " vim-markdown dependency
"}}}
"{{{milkypostman/vim-togglelist
Plug 'milkypostman/vim-togglelist' " Location list
"}}}
" {{{ simeji/winresizer
Plug 'simeji/winresizer' " Resize windows
let g:winresizer_start_key='<C-T>'
" }}}
"{{{alvan/vim-closetag
Plug 'alvan/vim-closetag', { 'for': 'html' } " Auto-close html tags
"}}}
"{{{tpope/vim-surround
Plug 'tpope/vim-surround' " vim-surround
"}}}
" {{{ mhinz/vim-startify
Plug 'mhinz/vim-startify' " Startup screen
let g:startify_change_to_dir = 0
"
" }}}
"{{{ w0rp/ale
Plug 'w0rp/ale', { 'for': 'cs' } " linter and more
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'typescript': ['tslint'],
            \   'javascript': ['eslint'],
            \}
"}}}
"{{{neoclide/coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release', 'for': ['javascript', 'vue', 'typescript']} " CocInstall coc-tsserver coc-json
"}}}
"{{{ prabirshrestha/asyncomplete.vim
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'yami-beta/asyncomplete-omni.vim'
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

let g:asyncomplete_auto_popup = 1

set completeopt=noinsert,menuone,noselect
let g:asyncomplete_auto_completeopt = 0

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
"}}}
"{{{morhetz/gruvbox
Plug 'morhetz/gruvbox' " colors
"}}}
"{{{ omnisharp/omnisharp-vim
Plug 'omnisharp/omnisharp-vim', { 'for': 'cs' } " C# completion
let g:OmniSharp_typeLookupInPreview = 0 " Set the type lookup function to use the preview window instead of echoing it
let g:OmniSharp_timeout = 5 " Timeout in seconds to wait for a response from the server
let g:ale_linters = { 'cs': ['OmniSharp'] } " Tell ALE to use OmniSharp for linting C# files, and no other linters.
let g:OmniSharp_highlight_types = 2 " Update semantic highlighting on BufEnter and InsertLeave
let g:OmniSharp_want_snippet=0
let g:omnicomplete_fetch_full_documentation = 1
let g:OmniSharp_selector_ui = 'fzf'
"}}}
"{{{ nickspoons/vim-sharpenup
Plug 'nickspoons/vim-sharpenup'
let g:sharpenup_map_prefix = ','
let g:sharpenup_codeactions = 0
"}}}
"{{{ puremourning/vimspector
Plug 'puremourning/vimspector'
" visual debugger for vim that should have some c# capabilities
"}}}
"{{{christoomey/vim-tmux-navigator
Plug 'christoomey/vim-tmux-navigator' " What it says
"}}}
"{{{ janko/vim-test
Plug 'janko/vim-test'
let g:test#csharp#runner='dotnettest'
let test#strategy = "vimterminal"
"}}}
"{{{tpope/vim-dispatch
Plug 'tpope/vim-dispatch'
"}}}
"{{{ Shougo/echodoc.vim
Plug 'Shougo/echodoc.vim'
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'echo'
"}}}
"{{{junegunn/vim-peekaboo
Plug 'junegunn/vim-peekaboo' " Peeks registers when you press \"
"}}}
"{{{editorconfig/editorconfig-vim
Plug 'editorconfig/editorconfig-vim'
"}}}
"{{{ Goyo
Plug 'junegunn/goyo.vim'
function! s:goyo_enter()
    set norelativenumber
    set nonumber
    set scrolloff=999
    set nocursorline
    set textwidth=0
    colorscheme gruvbox
    Limelight
endfunction

function! s:goyo_leave()
    Limelight!
    silent! source ~/.vim/vimrc
endfunction

function! s:goyo_start()
    augroup linenumbers
        autocmd!
    augroup END
    Goyo x80
endfunction

command! Z call <SID>goyo_start()
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
" autocmd! User GoyoLeave source ~/.vim/vimrc
"}}}
"{{{junegunn/limelight.vim
Plug 'junegunn/limelight.vim'
"}}}
"{{{tmadsen/vim-compiler-plugin-for-dotnet
Plug 'tmadsen/vim-compiler-plugin-for-dotnet'
"}}}
"{{{tmadsen/vim-filetype-settings
Plug 'tmadsen/vim-filetype-settings'
"}}}
"{{{NLKNguyen/papercolor-theme
Plug 'NLKNguyen/papercolor-theme'
"}}}
"{{{alok/notational-fzf-vim
Plug 'alok/notational-fzf-vim'
let g:nv_search_paths = ['~/text/datamadsen', '~/text/drafts', '~/text/posts', '~/text/sundhed.dk' , '~/text/thoughts']
"}}}
"{{{tpope/vim-sensible
Plug 'tpope/vim-sensible'
"}}}
"{{{davidoc/taskpaper.vim
Plug 'davidoc/taskpaper.vim'
"}}}
"{{{junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'
"}}}
"{{{vim-airline/vim-airline
" Plug 'vim-airline/vim-airline'
"}}}
"{{{chaoren/vim-wordmotion
" camelcasing word motions (hyggeNokNuHer requires 4w to go all the way through
" the word
Plug 'chaoren/vim-wordmotion'
nmap cw ce
nmap cW cE
"}}}
"{{{ airblade/vim-gitgutter
Plug 'airblade/vim-gitgutter'
let g:gitgutter_grep                    = 'rg'
let g:gitgutter_map_keys                = 0
let g:gitgutter_sign_added              = '▎'
let g:gitgutter_sign_modified           = '▎'
let g:gitgutter_sign_modified_removed   = '▌'
let g:gitgutter_sign_removed            = '▎'
let g:gitgutter_sign_removed_first_line = '▎'
nmap [g <Plug>GitGutterPrevHunkzz
nmap ]g <Plug>GitGutterNextHunkzz
nmap <Leader>p <Plug>GitGutterPreviewHunk
nmap <Leader>+ <Plug>GitGutterStageHunk
nmap <Leader>- <Plug>GitGutterUndoHunk
"}}}
call plug#end()
" }}}

filetype plugin indent on
syntax on

" {{{ Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=BitstreamVeraSansMonoNerdFontComplete-Roman:h14
else
    set t_Co=256
endif
colorscheme gruvbox
"{{{
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'
"}}}
let g:airline_theme='one'
set background=dark
highlight Normal ctermbg=NONE " http://stackoverflow.com/a/18224803/62802
highlight nonText ctermbg=NONE
" }}}

"{{{ Vim UI
set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo
set noshowmode " lightline shows mode
set linespace=1
set wildmenu
set ruler
set cmdheight=2
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow
set number
set relativenumber
augroup linenumbers
    autocmd!
    autocmd BufEnter *    :set relativenumber
    autocmd BufLeave *    :set number norelativenumber
    autocmd WinEnter *    :set relativenumber
    autocmd WinLeave *    :set number norelativenumber
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set relativenumber
    autocmd FocusLost *   :set number norelativenumber
    autocmd FocusGained * :set relativenumber
augroup END
nnoremap <silent> <C-S> :<C-u>update<CR>

augroup Formatting
    autocmd!
    autocmd BufNew,BufRead *.txt,*.mkd setlocal textwidth=0
augroup END

set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set nohlsearch " experimenting with navigating more by search
set colorcolumn=81
set diffopt+=vertical
set cursorline
set mouse=a " Enable mouse in all modes
" set ttymouse=xterm2 " Works with my mintty/tmux setup
set ttyfast " We have a fast terminal connection

" set fo=tcrqnj
set fo=crqnj
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set wrap
set textwidth=79
set ignorecase
set wildignorecase
set foldmethod=marker
set autowrite
set smartcase
set cmdheight=2
highlight Pmenu ctermbg=238
map <leader>h :set hlsearch! <CR> " toggle search highlighting
"}}}

" {{{ Remap commands that I mistype
command! W w
command! Wq wq
command! Q q
command! Qa qa
command! Here split | lcd %:h | terminal ++curwin
cmap w!! w !sudo tee > /dev/null %
command! Text tcd ~/text
" }}}

" {{{ Toggle the color column
let g:oldColorColumn = 0
function! ToggleColorColumn()
    if &colorcolumn > '0'
        let g:oldColorColumn=&colorcolumn
        let &colorcolumn=0
    else
        let &colorcolumn=g:oldColorColumn
    endif
endfunction
call ToggleColorColumn()
map <leader>c :call ToggleColorColumn()<CR> " Esc+c=toggle color column

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
" }}}

" {{{ Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>
" }}}

" {{{ use rg for grep
if (executable("rg"))
    set grepprg=rg\ --vimgrep
endif
" }}}

" {{{ Better movemment when text is wrapped
function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")
" }}}

"{{{ automatically wrap quickfix area
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
    autocmd FileType qf setlocal linebreak
augroup END
"}}}

" {{{ trying without these settings.
" unfold folds on buffer read
autocmd BufRead * normal zR
" }}}

" {{{ asyncomplete sources
call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
            \ 'name': 'omni',
            \ 'whitelist': ['*'],
            \ 'completor': function('asyncomplete#sources#omni#completor')
            \  }))
" }}}
