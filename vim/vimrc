set nocompatible
set encoding=UTF-8
set hidden
let mapleader = " "

" {{{ Plugins
filetype off
call plug#begin('$HOME/.vim/plugged')
Plug 'cohama/lexima.vim' " auto close stuff
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'tpope/vim-commentary'
Plug 'preservim/nerdtree'
Plug 'milkypostman/vim-togglelist' " Location list
Plug 'simeji/winresizer' " Resize windows
Plug 'alvan/vim-closetag' " Auto-close html tags
Plug 'tpope/vim-surround' " vim-surround
Plug 'mhinz/vim-startify' " Startup screen
Plug 'dense-analysis/ale', { 'for': 'cs' } " linter and more
Plug 'prabirshrestha/async.vim'
Plug 'puremourning/vimspector' " visual debugger for vim that should have some c# capabilities
Plug 'christoomey/vim-tmux-navigator'
Plug 'janko/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'junegunn/vim-peekaboo' " Peeks registers when you press \"
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/limelight.vim'
Plug 'tmadsen/vim-compiler-plugin-for-dotnet'
Plug 'alok/notational-fzf-vim'
Plug 'tpope/vim-sensible'
Plug 'itchyny/lightline.vim'
Plug 'datamadsen/vim-filetype-settings'
Plug 'honza/vim-snippets'
Plug 'vimwiki/vimwiki'

" Color themes
Plug 'julien/vim-colors-green'
Plug 'caglartoklu/qbcolor.vim'
Plug 'gruvbox-community/gruvbox'
Plug 'foxbunny/vim-amber'
Plug 'vim-scripts/crt.vim'
Plug 'n00bmind/retro-minimal'
Plug 'tomasr/molokai'
Plug 'xolox/vim-colorscheme-switcher'
Plug 'xolox/vim-misc'

" dotnet
Plug 'prabirshrestha/asyncomplete.vim', { 'for': ['cs', 'csproj'] }
Plug 'yami-beta/asyncomplete-omni.vim', { 'for': ['cs', 'csproj'] }
Plug 'omnisharp/omnisharp-vim', { 'for': ['cs', 'csproj'] }
Plug 'nickspoons/vim-sharpenup'


" Javascript, TypeScript, react
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'peitalin/vim-jsx-typescript'
Plug 'neoclide/coc.nvim', {'branch': 'release', 'for': ['javascript', 'typescript']}
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
call plug#end()
filetype plugin indent on
syntax on
" }}}

" {{{ Plugin configuration
" {{{ closetag
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js'
let g:closetag_filetypes = 'html,xhtml,phtml,js'
" }}}

" {{{ fzf
nmap <C-_> :Rg<CR>
nmap <leader>/ :BLines<CR>
nmap <C-B> :Buffers<CR>
" }}}
" {{{ clap
let g:clap_open_preview='never'
nmap <leader>. :Clap files<CR>
" }}}
" {{{ NERDTree
map <leader>P :NERDTreeToggleVCS<CR>
map <leader>F :NERDTreeFind<CR>
let g:NERDTreeWinSize = 50
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeIgnore = ['bin', 'obj']
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'
" }}}
" {{{ ranger
map <leader>rr :RangerEdit<cr>
map <leader>rv :RangerVSplit<cr>
map <leader>rs :RangerSplit<cr>
map <leader>rt :RangerTab<cr>
map <leader>ri :RangerInsert<cr>
map <leader>ra :RangerAppend<cr>
map <leader>rc :set operatorfunc=RangerChangeOperator<cr>g@
map <leader>rd :RangerCD<cr>
map <leader>rld :RangerLCD<cr>
" }}}
" {{{ vimwiki
let wiki = {}
let wiki.nested_syntaxes = {'yaml':'yaml', 'sh':'sh'}
" }}}
" {{{ winresizer
let g:winresizer_start_key='<C-T>'
" }}}
" {{{ startify
let g:startify_change_to_dir = 0
" }}}
"{{{ ale
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
let g:ale_sign_info = '·'
let g:ale_sign_style_error = '·'
let g:ale_sign_style_warning = '·'
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'typescript': ['tslint'],
            \   'javascript': ['eslint'],
            \   'cs': ['OmniSharp']
            \}
let g:ale_linters = {
\ 'cs': ['OmniSharp']
\}
"}}}
" {{{ asyncomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
" }}}
" {{{ asyncomplete-omni
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
 \ 'name': 'omni',
 \ 'allowlist': ['cs', 'csproj', 'sln'],
 \ 'blocklist': ['c', 'cpp', 'html', 'js', 'css'],
 \ 'completor': function('asyncomplete#sources#omni#completor'),
 \ 'config': {
 \   'show_source_kind': 0
 \ }
 \ }))
" }}}
" {{{ omnisharp
let g:OmniSharp_server_use_mono = 0
let g:OmniSharp_server_use_net6 = 1
let g:OmniSharp_selector_ui = 'clap'
let g:OmniSharp_selector_findusages = 'clap'
let g:OmniSharp_fzf_options = { 'window': 'botright 7new' }
let g:OmniSharp_completion_without_overloads = 1
let g:OmniSharp_popup_position = 'peek'
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [0, 0, 0, 0],
\ 'border': [1]
\}
let g:OmniSharp_popup_mappings = {
\ 'sigNext': '<D-j>',
\ 'sigPrev': '<D-k>',
\ 'pageDown': ['<D-f>', '<PageDown>'],
\ 'pageUp': ['<D-b>', '<PageUp>']
\}
" }}}
" {{{ sharpenup
let g:sharpenup_map_prefix = ','
let g:sharpenup_codeactions = 1
" }}}
" {{{ vim-test
let g:test#csharp#runner='dotnettest'
let test#strategy = "vimterminal"
" }}}
" {{{ nv-fzf
let g:nv_search_paths = ['~/']
" }}}
" {{{ lightline
let g:lightline = {
\ 'colorscheme': 'gruvbox',
\ 'active': {
\   'right': [
\     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok'],
\     ['lineinfo'], ['percent'],
\     ['fileformat', 'fileencoding', 'filetype', 'sharpenup']
\   ]
\ },
\ 'inactive': {
\   'right': [['lineinfo'], ['percent'], ['sharpenup']]
\ },
\ 'component': {
\   'sharpenup': sharpenup#statusline#Build()
\ },
\ 'component_expand': {
\   'linter_checking': 'lightline#ale#checking',
\   'linter_infos': 'lightline#ale#infos',
\   'linter_warnings': 'lightline#ale#warnings',
\   'linter_errors': 'lightline#ale#errors',
\   'linter_ok': 'lightline#ale#ok'
  \  },
  \ 'component_type': {
  \   'linter_checking': 'right',
  \   'linter_infos': 'right',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'right'
\  }
\}
" Use unicode chars for ale indicators in the statusline
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_infos = "\uf129 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "
let g:lightline#ale#indicator_ok = "\uf00c "
" }}}
" }}}

" {{{ Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=JetBrainsMonoNLNerdFontCompleteM-Medium:h13
else
    set t_Co=256
endif
set termguicolors
colorscheme gruvbox
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'
set background=dark
highlight Normal ctermbg=NONE " http://stackoverflow.com/a/18224803/62802
highlight nonText ctermbg=NONE
" }}}

"{{{ Vim settings
set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo
set noshowmode " lightline shows mode
set linespace=1
set wildmenu
set ruler
set cmdheight=2
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow
set number
set relativenumber
set completeopt=menuone,noinsert,noselect,popuphidden
set completepopup=highlight:Pmenu,border:off
set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set nohlsearch " experimenting with navigating more by search
set colorcolumn=81
" set diffopt+=vertical
set cursorline
set mouse=a " Enable mouse in all modes
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif
set ttyfast " We have a fast terminal connection

set fo=tcrqnj
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set wrap
set textwidth=79
set ignorecase
set wildignorecase
set foldmethod=marker
set autowrite
set smartcase
highlight Pmenu ctermbg=238
"}}}

" {{{ Line numbers
augroup linenumbers
    autocmd!
    autocmd BufEnter *    :set relativenumber
    autocmd BufLeave *    :set number norelativenumber
    autocmd WinEnter *    :set relativenumber
    autocmd WinLeave *    :set number norelativenumber
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set relativenumber
    autocmd FocusLost *   :set number norelativenumber
    autocmd FocusGained * :set relativenumber
augroup END
" }}}

map <leader>h :set hlsearch! <CR> " toggle search highlighting

" {{{ Toggle the color column
let g:oldColorColumn = 0
function! ToggleColorColumn()
    if &colorcolumn > '0'
        let g:oldColorColumn=&colorcolumn
        let &colorcolumn=0
    else
        let &colorcolumn=g:oldColorColumn
    endif
endfunction
call ToggleColorColumn()
map <leader>c :call ToggleColorColumn()<CR> " Esc+c=toggle color column

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
" autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
" }}}

" {{{ Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>
" }}}

" {{{ use rg for grep
if (executable("rg"))
    set grepprg=rg\ --vimgrep
endif
" }}}

"{{{ automatically wrap quickfix area
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
    autocmd FileType qf setlocal linebreak
augroup END
"}}}

" {{{ unfold folds on buffer read
autocmd BufRead * normal zR
" }}}

"{{{ Strip trailing whitespace
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    keepp %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,cs autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
"}}}

"{{{ nice search and replace with confirmation 
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
"}}}
