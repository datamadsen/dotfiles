set nocompatible
set encoding=utf8

" use space as leader. I used to use comma as leader, but it's useful for
" navigating
let mapleader = " "

" General
filetype off
call plug#begin('$HOME/.vim/plugged')
Plug 'cohama/lexima.vim' " Auto-close parentheses
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary' " Comment stuff out/in
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " Tree explorer
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' } " Markdown
Plug 'godlygeek/tabular', { 'for': 'markdown' } " vim-markdown dependency
Plug 'nelstrom/vim-markdown-folding', { 'for': 'markdown' } " Markdown folding
Plug 'tpope/vim-fugitive' " Git
Plug 'milkypostman/vim-togglelist' " Location list
Plug 'simeji/winresizer' " Resize windows
" Plug 'powerman/vim-plugin-AnsiEsc'
" Plug 'Konfekt/FastFold' " Folding optimization
Plug 'alvan/vim-closetag', { 'for': 'html' } " Auto-close html tags
Plug 'tpope/vim-surround' " vim-surround

" Plug 'Quramy/tsuquyomi', { 'for': 'typescript' } " Typescript ide
" Plug 'leafgarland/typescript-vim', { 'for': 'typescript' } " Typescript syntax

Plug 'itchyny/lightline.vim' " Statusline
Plug 'mhinz/vim-startify' " Startup screen
" Plug 'rakr/vim-one' "color theme
" Plug 'pangloss/vim-javascript', { 'for': 'javascript' } " javascript niceties
" Plug 'ternjs/tern_for_vim', { 'for': 'javascript' } " javascript goodness
Plug 'maxbrunsfeld/vim-yankstack' " meta-p goes back
Plug 'w0rp/ale' " linter and more
" Plug 'ryanoasis/vim-devicons' " nice icons everywhere
" Plug 'ajh17/VimCompletesMe' " another completion experiment
Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'severin-lemaignan/vim-minimap' " minimap
Plug 'editorconfig/editorconfig-vim' " editorconfig
Plug 'morhetz/gruvbox' " colors
Plug 'omnisharp/omnisharp-vim' " C# completion
Plug 'christoomey/vim-tmux-navigator' " What it says
" Plug 'tpope/vim-obsession' " continuously updated session files
" Plug 'chriskempson/vim-tomorrow-theme'
" Plug 'mustache/vim-mustache-handlebars'
Plug 'janko/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'SirVer/ultisnips'
Plug 'tmadsen/dm-snippets'
call plug#end()

filetype plugin indent on

syntax on " syntax highlighting on

set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo

" Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=BitstreamVeraSansMonoNerdFontComplete-Roman:h14
else
    set t_Co=256
endif
colorscheme gruvbox
set background=dark
let g:airline_theme='one'
highlight Normal ctermbg=NONE " http://stackoverflow.com/a/18224803/62802
highlight nonText ctermbg=NONE

" Vim UI
set linespace=1
set wildmenu
set ruler
set cmdheight=1
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow
set number
set relativenumber
augroup linenumbers
    autocmd!
    autocmd BufEnter *    :set relativenumber
    autocmd BufLeave *    :set number norelativenumber
    autocmd WinEnter *    :set relativenumber
    autocmd WinLeave *    :set number norelativenumber
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set relativenumber
    autocmd FocusLost *   :set number norelativenumber
    autocmd FocusGained * :set relativenumber
augroup END
nnoremap <silent> <C-S> :<C-u>update<CR>

" Visual Cues
set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set nohlsearch " experimenting with navigating more by search
set colorcolumn=81
set diffopt+=vertical
set cursorline
set mouse=a " Enable mouse in all modes
set ttymouse=xterm2 " Works with my mintty/tmux setup
set ttyfast " We have a fast terminal connection
set statusline=
" set statusline=%F\ "full filepath
set statusline=%t\ "file name
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" Text Formatting/Layout
set fo=tcrqn
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set nowrap
set textwidth=79

" Misc.
set ignorecase
set smartcase
set wildignorecase
set foldmethod=syntax
set autowrite

" Should turn of esc-key delay:
set noesckeys
set ttimeout
set ttimeoutlen=1

" Remap commands that I mistype
command! W w
command! Wq wq
command! Q q
command! Qa qa

" Toggle the color column
let g:oldColorColumn = 0
function! ToggleColorColumn()
    if &colorcolumn > '0'
        let g:oldColorColumn=&colorcolumn
        let &colorcolumn=0
    else
        let &colorcolumn=g:oldColorColumn
    endif
endfunction
call ToggleColorColumn()

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>

" tern-for-vim, javascript mappings
autocmd FileType javascript nmap <silent> <F1>d :TernDoc<CR>
autocmd FileType javascript nmap <silent> <leader>b :TernDocBrowse<CR>
autocmd FileType javascript nmap <silent> <F2>r :TernRename<CR>
autocmd FileType javascript nmap <silent> <F12> :TernRefs<CR>
autocmd FileType javascript nmap <silent> <leader>t :TernType<CR>
autocmd FileType javascript nmap <silent> <C-]>g :TernDef<CR>
let g:tern_show_signature_in_pum=1

" Use ag.
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " bind \ (backward slash) to Ag shortcut
    command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
endif
" use rg ;)
if (executable("rg"))
    set grepprg=rg\ --vimgrep
endif

"ctrlp
map <leader>p :CtrlPBuffer<CR>
map <leader>. :CtrlPBufTag<CR>
map <leader>, :CtrlPTag<CR>
let g:ctrlp_custom_ignore = 'git\|hg\|svn\|node_modules\|_build\|packages\|TestResults'
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

" Nicer pum color
highlight Pmenu ctermbg=238

" markdown
let g:vim_markdown_new_list_item_indent = 2
autocmd FileType markdown setlocal wrap
autocmd FileType markdown setlocal linebreak


" Togglelist
let g:toggle_list_copen_command="Copen"

" winresizer
let g:winresizer_start_key='<C-T>'

" fugitive
autocmd FileType gitcommit setlocal nofoldenable

" nerdtree
map <leader>P :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 50
let g:NERDTreeShowLineNumbers=1
let g:webdevicons_conceal_nerdtree_brackets = 1

" madsen leader stuff
map <leader>c :call ToggleColorColumn()<CR> " Esc+c=toggle color column
map <leader>h :set hlsearch! <CR> " toggle search highlighting

" Better movemment when text is wrapped
function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" automatically wrap quickfix area
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
    autocmd FileType qf setlocal linebreak
augroup END

" Improvements to pum
set completeopt=menuone,noselect ",noinsert ",noselect

" tsuquyomi
let g:tsuquyomi_disable_quickfix = 1

" youcompleteme
" map <F9> :YcmCompleter FixIt<CR>

" Ale
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'typescript': ['tslint'],
            \}
nmap <C-F> :ALEFix<CR>

" unfold folds on buffer read
autocmd BufRead * normal zR

" omnisharp
" Use the stdio OmniSharp-roslyn server
let g:OmniSharp_server_stdio = 1

" Set the type lookup function to use the preview window instead of echoing it
let g:OmniSharp_typeLookupInPreview = 0

" Timeout in seconds to wait for a response from the server
let g:OmniSharp_timeout = 5

" Set desired preview window height for viewing documentation.
" You might also want to look at the echodoc plugin.
set previewheight=5

" Tell ALE to use OmniSharp for linting C# files, and no other linters.
let g:ale_linters = { 'cs': ['OmniSharp'] }

" Update semantic highlighting on BufEnter and InsertLeave
let g:OmniSharp_highlight_types = 2

augroup omnisharp_commands
    autocmd!

    " Show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    " The following commands are contextual, based on the cursor position.

    " Finds members in the current buffer

    autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>
    autocmd FileType cs nnoremap <buffer> <C-\> :OmniSharpSignatureHelp<CR>
    " autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>

    " Navigate up and down by method/property/field
    autocmd FileType cs nnoremap <buffer> <M-k> :OmniSharpNavigateUp<CR>
    autocmd FileType cs nnoremap <buffer> <M-j> :OmniSharpNavigateDown<CR>

    " Find all code errors/warnings for the current solution and populate the quickfix window
	autocmd FileType cs command! Check :OmniSharpGlobalCodeCheck
    autocmd FileType cs nnoremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>

    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

	" Update the highlighting whenever leaving insert mode
    autocmd InsertLeave *.cs call OmniSharp#HighlightBuffer()

	autocmd FileType cs command! GotoDefinition :OmniSharpGotoDefinition
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>

	autocmd FileType cs command! Implementation :OmniSharpFindImplementations
	autocmd FileType cs command! FindImplementation :OmniSharpFindImplementations
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>

	autocmd FileType cs command! Symbol :OmniSharpFindSymbol
	autocmd FileType cs command! FindSymbol :OmniSharpFindSymbol
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>

	autocmd FileType cs command! Usages :OmniSharpFindUsages
	autocmd FileType cs command! FindUsages :OmniSharpFindUsages
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

	autocmd FileType cs command! FindMembers :OmniSharpFindMembers
	autocmd FileType cs command! Members :OmniSharpFindMembers
    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

	autocmd FileType cs command! FixUsings :OmniSharpFixUsings
    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>

	autocmd FileType cs command! TypeLookup :OmniSharpTypeLookup
    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>

	autocmd FileType cs command! Documentation :OmniSharpDocumentation

	autocmd FileType cs command! Signature :OmniSharpSignatureHelp

	autocmd FileType cs command! Actions :OmniSharpGetCodeActions

	autocmd FileType cs command! Rename :OmniSharpRename

	autocmd FileType cs command! Format :OmniSharpCodeFormat

	autocmd FileType cs command! StopAll :OmniSharpStopAllServers
	autocmd FileType cs command! Stop :OmniSharpStopServer
	autocmd FileType cs command! Start :OmniSharpStartServer

    autocmd FileType cs map <C-]> :OmniSharpGotoDefinition<CR>
    autocmd FileType cs map <C-f> :OmniSharpCodeFormat<CR>
    autocmd FileType cs map <C-a> :OmniSharpCodeActions<CR>

    autocmd FileType cs set makeprg=dotnet\ build
    autocmd FileType cs let b:dispatch='dotnet build && dotnet test'
    autocmd FileType cs set errorformat=\ %#%f(%l\\\,%c):\ %m

	autocmd FileType cs set foldmethod=indent

	autocmd FileType cs set foldnestmax=3
	autocmd FileType cs set foldlevelstart=2
	autocmd FileType cs set foldlevel=2
	autocmd FileType cs set signcolumn=yes
	autocmd FileType cs map zM :set foldlevel=2<CR>
augroup END

" Contextual code actions (uses fzf, CtrlP or unite.vim when available)
nnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>
" Run code actions with text selected in visual mode to extract method
xnoremap <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>

let g:OmniSharp_want_snippet=1

" vimcompletesme
" autocmd FileType cs let b:vcm_tab_complete = "omni"
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Plug 'prabirshrestha/asyncomplete.vim'
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

set completeopt+=preview

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" UltiSnips
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"

" fzf
nmap <C-P> :FZF<CR>

" vim-test
let g:test#csharp#runner='dotnettest'
