set nocompatible
set encoding=utf8

" use space as leader. I used to use comma as leader, but it's useful for
" navigating
let mapleader = " "

" General
filetype off
call plug#begin('$HOME/.vim/plugged')
Plug 'cohama/lexima.vim' " Auto-close parentheses
Plug 'ctrlpvim/ctrlp.vim' " Fuzzy finder
Plug 'tpope/vim-commentary' " Comment stuff out/in
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " Tree explorer
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' } " Markdown
Plug 'godlygeek/tabular', { 'for': 'markdown' } " vim-markdown dependency
Plug 'nelstrom/vim-markdown-folding', { 'for': 'markdown' } " Markdown folding
Plug 'tpope/vim-fugitive', { 'on': 'Gstatus' } " Git
Plug 'milkypostman/vim-togglelist' " Location list
Plug 'simeji/winresizer' " Resize windows
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'Konfekt/FastFold' " Folding optimization
Plug 'alvan/vim-closetag', { 'for': 'html' } " Auto-close html tags
Plug 'tpope/vim-surround' " vim-surround
Plug 'Quramy/tsuquyomi', { 'for': 'typescript' } " Typescript ide
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' } " Typescript syntax
Plug 'vim-airline/vim-airline' " Statusline
Plug 'mhinz/vim-startify' " Startup screen
Plug 'rakr/vim-one' "color theme
Plug 'Valloric/YouCompleteMe' " completion engine
Plug 'pangloss/vim-javascript', { 'for': 'javascript' } " javascript niceties
Plug 'ternjs/tern_for_vim', { 'for': 'javascript' } " javascript goodness
Plug 'prettier/vim-prettier' " code formatting
Plug 'maxbrunsfeld/vim-yankstack' " meta-p goes back
Plug 'w0rp/ale' " linter
Plug 'ryanoasis/vim-devicons' " nice icons everywhere

call plug#end()
filetype plugin indent on

syntax on " syntax highlighting on

set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo

" Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=BitstreamVeraSansMonoNerdFontCM-Roman:h14
else
    set t_Co=256
endif
colorscheme one
set background=light
let g:airline_theme='one'
highlight Normal ctermbg=NONE " http://stackoverflow.com/a/18224803/62802
highlight nonText ctermbg=NONE
set lines=52
set columns=140
winpos 900 66

" Initial colors for visual indicator lines on screen
hi StatusLine  ctermbg=white  ctermfg=green
hi LineNr      ctermbg=green  ctermfg=white
hi ColorColumn ctermbg=green  ctermfg=white

" Blue lines in insert mode
au InsertEnter * hi StatusLine  ctermbg=white ctermfg=blue
au InsertEnter * hi LineNr      ctermbg=blue  ctermfg=white
au InsertEnter * hi ColorColumn ctermbg=blue  ctermfg=white

" Green lines in normal mode
au InsertLeave * hi StatusLine  ctermbg=white  ctermfg=green
au InsertLeave * hi LineNr      ctermbg=green  ctermfg=white
au InsertLeave * hi ColorColumn ctermbg=green  ctermfg=white

" Vim UI
set linespace=1
set wildmenu
set ruler
set cmdheight=1
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow
set number
set relativenumber
augroup linenumbers
    autocmd!
    autocmd BufEnter *    :set relativenumber
    autocmd BufLeave *    :set number norelativenumber
    autocmd WinEnter *    :set relativenumber
    autocmd WinLeave *    :set number norelativenumber
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set relativenumber
    autocmd FocusLost *   :set number norelativenumber
    autocmd FocusGained * :set relativenumber
augroup END
nnoremap <silent> <C-S> :<C-u>update<CR>

" Visual Cues
set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set nohlsearch " experimenting with navigating more by search
set colorcolumn=81
set diffopt+=vertical
set cursorline
set mouse=a " Enable mouse in all modes
set ttymouse=xterm2 " Works with my mintty/tmux setup
set ttyfast " We have a fast terminal connection
set statusline=
" set statusline=%F\ "full filepath
set statusline=%t\ "file name
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" Text Formatting/Layout
set fo=tcrqn
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set nowrap
set textwidth=79

" Misc.
set ignorecase
set foldmethod=syntax

" Should turn of esc-key delay:
set noesckeys
set ttimeout
set ttimeoutlen=1

" Remap commands that I mistype
command! W w
command! Wq wq
command! Q q
command! Qa qa

" Toggle the color column
let g:oldColorColumn = 0
function! ToggleColorColumn()
    if &colorcolumn > '0'
        let g:oldColorColumn=&colorcolumn
        let &colorcolumn=0
    else
        let &colorcolumn=g:oldColorColumn
    endif
endfunction
call ToggleColorColumn()

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>

" tern-for-vim, javascript mappings
autocmd FileType javascript nmap <silent> <F1>d :TernDoc<CR>
autocmd FileType javascript nmap <silent> <leader>b :TernDocBrowse<CR>
autocmd FileType javascript nmap <silent> <F2>r :TernRename<CR>
autocmd FileType javascript nmap <silent> <F12> :TernRefs<CR>
autocmd FileType javascript nmap <silent> <leader>t :TernType<CR>
autocmd FileType javascript nmap <silent> <C-]>g :TernDef<CR>
let g:tern_show_signature_in_pum=1

" Use ag.
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
" use rg ;)
if (executable("rg"))
    set grepprg=rg\ --vimgrep
endif

"ctrlp
map <leader>p :CtrlPBuffer<CR>
map <leader>. :CtrlPBufTag<CR>
map <leader>, :CtrlPTag<CR>
let g:ctrlp_custom_ignore = 'git\|hg\|svn\|node_modules\|_build\|packages\|TestResults'
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

" Nicer pum color
highlight Pmenu ctermbg=238

" markdown
let g:vim_markdown_new_list_item_indent = 2

""" omnisharp test
"This is the default value, setting it isn't actually necessary
let g:Omnisharp_start_server = 0
let g:Omnisharp_stop_server = 0
let g:OmniSharp_server_path = "/Users/tmadsen/forks/omnisharp-roslyn/artifacts/publish/OmniSharp/default/netcoreapp1.1"
" let g:OmniSharp_host = "http://localhost:2000"

"Set the type lookup function to use the preview window instead of the status line
" let g:OmniSharp_typeLookupInPreview = 1

"Timeout in seconds to wait for a response from the server
" let g:OmniSharp_timeout = 1

"Showmatch significantly slows down omnicomplete
"when the first match contains parentheses.
set noshowmatch

"Super tab settings - uncomment the next 4 lines
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
let g:SuperTabClosePreviewOnPopupClose = 1

"don't autoselect first item in omnicomplete, show if only one item (for preview)
"remove preview if you don't want to see any documentation whatsoever.
" set completeopt=longest,menuone,preview
" Fetch full documentation during omnicomplete requests.
" There is a performance penalty with this (especially on Mono)
" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
" you need it with the :OmniSharpDocumentation command.
let g:omnicomplete_fetch_documentation=1

"Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
"You might also want to look at the echodoc plugin
set splitbelow

" Get Code Issues and syntax errors
" let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
" If you are using the omnisharp-roslyn backend, use the following
let g:OmniSharp_server_type = 'roslyn'
let g:syntastic_cs_checkers = ['code_checker']
augroup omnisharp_commands
    autocmd!

    "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

    " Builds can also run asynchronously with vim-dispatch installed
    autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>

    " automatic syntax check on events (TextChanged requires Vim 7.4)
    autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

    " Automatically add new cs files to the nearest project on save
    " autocmd BufWritePost *.cs call OmniSharp#AddToProject()

    "show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    autocmd FileType cs nnoremap gd :w <bar> :OmniSharpGotoDefinition<cr>
    autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
    autocmd FileType cs nnoremap <leader>, :OmniSharpFindType<cr>
    autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
    autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
    autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
    autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
    autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>
    " autocmd FileType cs nnoremap <leader>tr :OmniSharpRunTests<cr>
    " autocmd FileType cs nnoremap <leader>tf :OmniSharpRunTestFixture<cr>
    " autocmd FileType cs nnoremap <leader>ta :OmniSharpRunAllTests<cr>
    " autocmd FileType cs nnoremap <leader>tl :OmniSharpRunLastTests<cr>

    autocmd BufNewFile,BufRead *.cshtml setf razor

    autocmd FileType cs inoremap <buffer> <expr> . pumvisible() ? "\<C-y>.<C-x><C-o>" : ".\<C-x><C-o>"
    autocmd FileType cs inoremap <buffer> <expr> ; pumvisible() ? "\<C-y>;" : ";"
    autocmd FileType cs inoremap <buffer> <expr> , pumvisible() ? "\<C-y>," : ","
    " autocmd FileType cs inoremap <buffer> <expr> <Tab> pumvisible() ? "\<C-y>" : "\<C-x><C-o>"
    autocmd FileType cs inoremap <buffer> <expr> <Space> pumvisible() ? "\<C-y> " : " "
    autocmd FileType cs inoremap <buffer> <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
augroup END


" this setting controls how long to wait (in ms) before fetching type / symbol information.
set updatetime=500
" Remove 'Press Enter to continue' message when type information is longer than one line.
set cmdheight=2

" Contextual code actions (requires CtrlP or unite.vim)
nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
" Run code actions with text selected in visual mode to extract method
vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>

" rename with dialog, write file first or we'll see errors
nnoremap <leader>nm :w <bar> OmniSharpRename<cr>
" nnoremap <F2> :OmniSharpRename<cr>
" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

" Force OmniSharp to reload the solution. Useful when switching branches etc.
nnoremap <leader>rl :OmniSharpReloadSolution<cr>
nnoremap <leader>cf :OmniSharpCodeFormat<cr>
" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>

" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
nnoremap <leader>ss :OmniSharpStartServer<cr>
nnoremap <leader>sq :OmniSharpStopServer<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>
"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
set hidden

""" omnisharp test end

" Togglelist
let g:toggle_list_copen_command="Copen"

" winresizer
let g:winresizer_start_key='<C-T>'

" fugitive
autocmd FileType gitcommit setlocal nofoldenable

" nerdtree
map <leader>P :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 50
let g:NERDTreeShowLineNumbers=1

" madsen leader stuff
map <leader>c :call ToggleColorColumn()<CR> " Esc+c=toggle color column
map <leader>h :set hlsearch! <CR> " toggle search highlighting
map <leader>gs :Gstatus <CR>
map <leader>gw :Gwrite <CR>
map <leader>gd :GDiff <CR>

" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" bind \ (backward slash) to Ag shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

nnoremap \ :Ag<SPACE>

" Better movemment when text is wrapped
function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" automatically wrap quickfix area
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
    autocmd FileType qf setlocal linebreak
augroup END

" Improvements to pum
set completeopt=menuone,noselect ",noinsert ",noselect

" tsuquyomi
let g:tsuquyomi_disable_quickfix = 1

" Markdown
autocmd FileType markdown setlocal wrap
autocmd FileType markdown setlocal linebreak

" youcompleteme
map <F9> :YcmCompleter FixIt<CR>

" prettier
nmap <C-F> <Plug>(Prettier)
let g:prettier#autoformat = 0

" Ale
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'javascript': ['eslint'],
            \   'typescript': ['tslint'],
            \}
nmap <F5> :ALEFix<CR>
