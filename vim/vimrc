set nocompatible
set encoding=utf8
set hidden
let mapleader = " "

" {{{ Plugins
filetype off
call plug#begin('$HOME/.vim/plugged')
Plug 'cohama/lexima.vim' " auto close stuff
" Plug 'tmsvg/pear-tree'
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'tpope/vim-commentary'
Plug 'preservim/nerdtree'
" Plug 'plasticboy/vim-markdown', { 'for': 'markdown' } " Markdown
" Plug 'godlygeek/tabular', { 'for': 'markdown' } " vim-markdown dependency
Plug 'milkypostman/vim-togglelist' " Location list
Plug 'simeji/winresizer' " Resize windows
Plug 'alvan/vim-closetag', { 'for': 'html' } " Auto-close html tags
Plug 'tpope/vim-surround' " vim-surround
Plug 'mhinz/vim-startify' " Startup screen
Plug 'dense-analysis/ale', { 'for': 'cs' } " linter and more
Plug 'prabirshrestha/async.vim'
Plug 'gruvbox-community/gruvbox' " colors
Plug 'puremourning/vimspector' " visual debugger for vim that should have some c# capabilities
Plug 'christoomey/vim-tmux-navigator'
Plug 'janko/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'junegunn/vim-peekaboo' " Peeks registers when you press \"
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/limelight.vim'
Plug 'tmadsen/vim-compiler-plugin-for-dotnet'
Plug 'alok/notational-fzf-vim'
Plug 'tpope/vim-sensible'
Plug 'itchyny/lightline.vim'
Plug 'tmadsen/vim-filetype-settings'
" Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'rafaqz/ranger.vim'

" dotnet
Plug 'prabirshrestha/asyncomplete.vim', { 'for': 'cs' }
Plug 'yami-beta/asyncomplete-omni.vim', { 'for': 'cs' }
Plug 'omnisharp/omnisharp-vim', { 'for': 'cs' }
Plug 'nickspoons/vim-sharpenup'


" Javascript, TypeScript, react
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'peitalin/vim-jsx-typescript'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()
filetype plugin indent on
syntax on
" }}}

" {{{ Plugin configuration

" {{{ fzf
nmap <C-P> :FZF<CR>
nmap <C-_> :Rg<CR>
nmap <leader>/ :BLines<CR>
nmap <C-B> :Buffers<CR>
" }}}
" {{{ NERDTree
map <leader>P :NERDTreeToggleVCS<CR>
map <leader>F :NERDTreeFind<CR>
let g:NERDTreeWinSize = 50
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeIgnore = ['bin', 'obj']
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'
" }}}
" {{{ ranger
map <leader>rr :RangerEdit<cr>
map <leader>rv :RangerVSplit<cr>
map <leader>rs :RangerSplit<cr>
map <leader>rt :RangerTab<cr>
map <leader>ri :RangerInsert<cr>
map <leader>ra :RangerAppend<cr>
map <leader>rc :set operatorfunc=RangerChangeOperator<cr>g@
map <leader>rd :RangerCD<cr>
map <leader>rld :RangerLCD<cr>
" }}}
" {{{ winresizer
let g:winresizer_start_key='<C-T>'
" }}}
" {{{ startify
let g:startify_change_to_dir = 0
" }}}
"{{{ ale
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
let g:ale_sign_info = '·'
let g:ale_sign_style_error = '·'
let g:ale_sign_style_warning = '·'
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'typescript': ['tslint'],
            \   'javascript': ['eslint'],
            \   'cs': ['OmniSharp']
            \}
let g:ale_linters = {
\ 'cs': ['OmniSharp']
\}
"}}}
" {{{ asyncomplete
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
" commented out because coc dconfig does something similar

" let g:asyncomplete_auto_popup = 1
" let g:asyncomplete_auto_completeopt = 0

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
" }}}
" {{{ asyncomplete-omni
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
 \ 'name': 'omni',
 \ 'allowlist': ['cs', 'csproj', 'sln'],
 \ 'blocklist': ['c', 'cpp', 'html', 'js', 'css'],
 \ 'completor': function('asyncomplete#sources#omni#completor'),
 \ 'config': {
 \   'show_source_kind': 0
 \ }
 \ }))
" }}}
" {{{ omnisharp
let g:OmniSharp_selector_ui = 'fzf'
let g:OmniSharp_selector_findusages = 'fzf'
let g:OmniSharp_fzf_options = { 'window': 'botright 7new' }
let g:OmniSharp_completion_without_overloads = 1
let g:OmniSharp_popup_position = 'peek'
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [0, 0, 0, 0],
\ 'border': [1]
\}
let g:OmniSharp_popup_mappings = {
\ 'sigNext': '<C-n>',
\ 'sigPrev': '<C-p>',
\ 'pageDown': ['<C-f>', '<PageDown>'],
\ 'pageUp': ['<C-b>', '<PageUp>']
\}
" }}}
" {{{ sharpenup
let g:sharpenup_map_prefix = ','
let g:sharpenup_codeactions = 1
" }}}
" {{{ vim-test
let g:test#csharp#runner='dotnettest'
let test#strategy = "vimterminal"
" }}}
" {{{ nv-fzf
let g:nv_search_paths = ['~/']
" }}}
" {{{ lightline
let g:lightline = {
\ 'colorscheme': 'gruvbox',
\ 'active': {
\   'right': [
\     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok'],
\     ['lineinfo'], ['percent'],
\     ['fileformat', 'fileencoding', 'filetype', 'sharpenup']
\   ]
\ },
\ 'inactive': {
\   'right': [['lineinfo'], ['percent'], ['sharpenup']]
\ },
\ 'component': {
\   'sharpenup': sharpenup#statusline#Build()
\ },
\ 'component_expand': {
\   'linter_checking': 'lightline#ale#checking',
\   'linter_infos': 'lightline#ale#infos',
\   'linter_warnings': 'lightline#ale#warnings',
\   'linter_errors': 'lightline#ale#errors',
\   'linter_ok': 'lightline#ale#ok'
  \  },
  \ 'component_type': {
  \   'linter_checking': 'right',
  \   'linter_infos': 'right',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'right'
\  }
\}
" Use unicode chars for ale indicators in the statusline
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_infos = "\uf129 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "
let g:lightline#ale#indicator_ok = "\uf00c "
" }}}
" }}}

" {{{ Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=Menlo-Regular:h13
else
    set t_Co=256
endif
colorscheme gruvbox
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'
set background=dark
highlight Normal ctermbg=NONE " http://stackoverflow.com/a/18224803/62802
highlight nonText ctermbg=NONE
" }}}

"{{{ Vim settings
set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo
set noshowmode " lightline shows mode
set linespace=1
set wildmenu
set ruler
set cmdheight=2
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow
set number
set relativenumber
set completeopt=menuone,noinsert,noselect,popuphidden
set completepopup=highlight:Pmenu,border:off
set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set nohlsearch " experimenting with navigating more by search
set colorcolumn=81
" set diffopt+=vertical
set cursorline
set mouse=a " Enable mouse in all modes
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif
set ttyfast " We have a fast terminal connection

" set fo=tcrqnj
set fo=crqnj
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set wrap
set textwidth=79
set ignorecase
set wildignorecase
set foldmethod=marker
set autowrite
set smartcase
highlight Pmenu ctermbg=238
"}}}

" {{{ Line numbers
augroup linenumbers
    autocmd!
    autocmd BufEnter *    :set relativenumber
    autocmd BufLeave *    :set number norelativenumber
    autocmd WinEnter *    :set relativenumber
    autocmd WinLeave *    :set number norelativenumber
    autocmd InsertEnter * :set number norelativenumber
    autocmd InsertLeave * :set relativenumber
    autocmd FocusLost *   :set number norelativenumber
    autocmd FocusGained * :set relativenumber
augroup END
" }}}

map <leader>h :set hlsearch! <CR> " toggle search highlighting

" {{{ Toggle the color column
let g:oldColorColumn = 0
function! ToggleColorColumn()
    if &colorcolumn > '0'
        let g:oldColorColumn=&colorcolumn
        let &colorcolumn=0
    else
        let &colorcolumn=g:oldColorColumn
    endif
endfunction
call ToggleColorColumn()
map <leader>c :call ToggleColorColumn()<CR> " Esc+c=toggle color column

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
" }}}

" {{{ Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>
" }}}

" {{{ use rg for grep
if (executable("rg"))
    set grepprg=rg\ --vimgrep
endif
" }}}

"{{{ automatically wrap quickfix area
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
    autocmd FileType qf setlocal linebreak
augroup END
"}}}

" {{{
" unfold folds on buffer read
autocmd BufRead * normal zR
" }}}

"{{{ Strip trailing whitespace
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    keepp %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,cs autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
"}}}

" {{{ Markdown settings
" au filetype markdown set formatoptions+=ro
" au filetype markdown set comments=b:*,b:-,b:+,b:1.,n:>
" }}}

" {{{ coc copy/paste from website
let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-json',
  \ 'coc-css'
  \ ]

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }}}
