set nocompatible
set encoding=utf-8

" use space as leader. I used to use comma as leader, but it's useful for
" navigating
let mapleader = " "

" General
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Plugin 'gmarik/vundle.git'
Plugin 'kien/ctrlp.vim.git'
Plugin 'tpope/vim-commentary'
Plugin 'crusoexia/vim-monokai'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-markdown'
Plugin 'nelstrom/vim-markdown-folding' 
Plugin 'tpope/vim-fugitive' 
Plugin 'ervandew/supertab'
Plugin 'airblade/vim-gitgutter.git'
Plugin 'adamclerk/vim-razor'
Plugin 'SirVer/ultisnips'
Plugin 'tmadsen/dm-snippets'
Plugin 'milkypostman/vim-togglelist'
Plugin 'simeji/winresizer'
Plugin 'tpope/vim-tbone'
Plugin 'while1eq1/vim-monokai-black'
Plugin 'cohama/lexima.vim'
Plugin 'danielmiessler/VimBlog'

if has("python")
	Plugin 'tmadsen/omnisharp-vim'
endif

call vundle#end()
filetype plugin indent on

syntax on " syntax highlighting on

set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo

" Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=Consolas:h13
else
    set t_Co=256
endif
colorscheme monokai
highlight Normal ctermbg=NONE " http://stackoverflow.com/a/18224803/62802
highlight nonText ctermbg=NONE

" Vim UI
"set scrolloff=99 " keep cursor in the middle when possible.
set linespace=1
set wildmenu
set ruler
set cmdheight=1
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow
set number
set relativenumber
augroup linenumbers
  autocmd!
  autocmd BufEnter *    :set relativenumber
  autocmd BufLeave *    :set number norelativenumber
  autocmd WinEnter *    :set relativenumber
  autocmd WinLeave *    :set number norelativenumber
  autocmd InsertEnter * :set number norelativenumber
  autocmd InsertLeave * :set relativenumber
  autocmd FocusLost *   :set number norelativenumber
  autocmd FocusGained * :set relativenumber
augroup END

" Visual Cues
set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set hlsearch
set colorcolumn=81
set diffopt+=vertical
set cursorline
set statusline=
set statusline=%F\ "full filepath
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file
set statusline+=%{fugitive#statusline()}


" Unfold files when opening them.
au BufRead * normal zR

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction

" Rename tmux window to filename.
"autocmd BufReadPost,BufEnter,FileReadPost,BufNewFile * call system("tmux rename-window " . expand("%"))

" Text Formatting/Layout
set fo=tcrqn
set autoindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set noexpandtab
set nowrap
set textwidth=79

" Misc.
set ignorecase
set foldmethod=syntax
set completeopt=menuone

" Should turn of esc-key delay:
set noesckeys
set ttimeout
set ttimeoutlen=1

" Run shell script being edited.
autocmd FileType sh nmap <leader>r :!./%<CR> 

" Remap commands that I mistype
command! W w
command! Wq wq
command! Q q
command! Qa qa


let g:oldColorColumn = 0
function! ToggleColorColumn()
	if &colorcolumn > '0'
		let g:oldColorColumn=&colorcolumn
		let &colorcolumn=0
	else
		let &colorcolumn=g:oldColorColumn
	endif
endfunction
call ToggleColorColumn()

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType javascript,html autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" UltiSnips
let g:UltiSnipsSnippetsDir="~/.vim/bundle/dm-snippets/UltiSnips"
let g:UltiSnipsEditSplit="horizontal"

" Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>

" XMlEdit
let g:xmledit_enable_html=1

" tern-for-vim, javascript mappings
autocmd FileType javascript nmap <silent> <leader>d :TernDoc<CR>
autocmd FileType javascript nmap <silent> <leader>b :TernDocBrowse<CR>
autocmd FileType javascript nmap <silent> <leader>r :TernRename<CR>
autocmd FileType javascript nmap <silent> <leader>u :TernRefs<CR>
autocmd FileType javascript nmap <silent> <leader>t :TernType<CR>
autocmd FileType javascript nmap <silent> <leader>g :TernDef<CR>
"let g:tern_show_argument_hints='on_move'
let g:tern_show_signature_in_pum=1

" js-eol
let g:jseol#trigger="<leader>e"

" Use ag.
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" easy-align.
let g:easy_align_ignore_groups=[]
vmap <Enter> <Plug>(EasyAlign)

"ctrlp
map <leader>p :CtrlPBuffer<CR>
map <leader>. :CtrlPBufTag<CR>
map <leader>, :CtrlPTag<CR>
let g:ctrlp_custom_ignore = 'git\|hg\|svn\|node_modules\|_build\|packages\|TestResults'
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

" delimit-mate
let g:delimitMate_expand_cr = 1

" Nicer pum color
highlight Pmenu ctermbg=238

" syntastic
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }

" jsdoc
let g:jsdoc_default_mapping=0 " Don't map <C-l> automatically.

" autopairs
let g:AutoPairsShortcutFastWrap = '' " If this is not here, we can't write Ã¥.
let g:AutoPairsFlyMode = 0

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_use_bundler = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_load_gemfile = 1
"let g:rubycomplete_rails = 1
set tags+=gems.tags

" vim-table-mode
let g:table_mode_corner_corner="+"
let g:table_mode_header_fillchar="="

" indentation on newline between html tags
function! NewlineInTag()
    let lnum = getline('.')
    let cnum = col('.')

    let chars = strpart(lnum, cnum - 2, 3)
    if chars =~ '></'
        return "\<CR>\<ESC>\<UP>$o"
    else
        return "\<CR>"
    endif
endfunction
autocmd FileType eruby,html imap <CR> <C-R>=NewlineInTag()<CR>

" use nested markdown folding expression
let g:markdown_fold_style = 'nested'


""" omnisharp test
"This is the default value, setting it isn't actually necessary
let g:OmniSharp_host = "http://localhost:2000"

"Set the type lookup function to use the preview window instead of the status line
"let g:OmniSharp_typeLookupInPreview = 1

"Timeout in seconds to wait for a response from the server
let g:OmniSharp_timeout = 1

"Showmatch significantly slows down omnicomplete
"when the first match contains parentheses.
set noshowmatch

"Super tab settings - uncomment the next 4 lines
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
let g:SuperTabClosePreviewOnPopupClose = 1

"don't autoselect first item in omnicomplete, show if only one item (for preview)
"remove preview if you don't want to see any documentation whatsoever.
" set completeopt=longest,menuone,preview
" Fetch full documentation during omnicomplete requests.
" There is a performance penalty with this (especially on Mono)
" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
" you need it with the :OmniSharpDocumentation command.
let g:omnicomplete_fetch_documentation=1

"Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
"You might also want to look at the echodoc plugin
set splitbelow

" Get Code Issues and syntax errors
let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
" If you are using the omnisharp-roslyn backend, use the following
" let g:syntastic_cs_checkers = ['code_checker']
augroup omnisharp_commands
    autocmd!

    "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

    " Synchronous build (blocks Vim)
    "autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
    " Builds can also run asynchronously with vim-dispatch installed
    autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
    " automatic syntax check on events (TextChanged requires Vim 7.4)
    " autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck
    autocmd BufWritePost *.cs SyntasticCheck

    " Automatically add new cs files to the nearest project on save
    autocmd BufWritePost *.cs call OmniSharp#AddToProject()

		" Automatically generate ctags on write
    " autocmd BufWritePost *.cs :Dispatch! ctags
		" Not necessary because omnisharp and ctrl-p seeming talks together.

    "show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    autocmd FileType cs nnoremap gd :w <bar> :OmniSharpGotoDefinition<cr>
    autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
    autocmd FileType cs nnoremap <leader>, :OmniSharpFindType<cr>
    autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
    autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
    "finds members in the current buffer
    "autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
		" ctrl-p does this for me.
    " cursor can be anywhere on the line containing an issue
    autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
    autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
    "autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
    autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>
    "navigate up by method/property/field
    "autocmd FileType cs nnoremap <A-k> :OmniSharpNavigateUp<cr>
    " autocmd FileType cs nnoremap k :OmniSharpNavigateUp<cr> This creates a messy situation with the escape key somehow.
    "navigate down by method/property/field
    "autocmd FileType cs nnoremap <A-j> :OmniSharpNavigateDown<cr>
    "autocmd FileType cs nnoremap j :OmniSharpNavigateDown<cr> This creates a
		"messy situation with the escape key somehow.
		autocmd FileType cs nnoremap <leader>tr :OmniSharpRunTests<cr>
		autocmd FileType cs nnoremap <leader>tf :OmniSharpRunTestFixture<cr>
		autocmd FileType cs nnoremap <leader>ta :OmniSharpRunAllTests<cr>
		autocmd FileType cs nnoremap <leader>tl :OmniSharpRunLastTests<cr>

		autocmd BufNewFile,BufRead *.cshtml setf razor
augroup END


" this setting controls how long to wait (in ms) before fetching type / symbol information.
set updatetime=500
" Remove 'Press Enter to continue' message when type information is longer than one line.
set cmdheight=2

" Contextual code actions (requires CtrlP or unite.vim)
nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
" Run code actions with text selected in visual mode to extract method
vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>

" rename with dialog, write file first or we'll see errors
nnoremap <leader>nm :w <bar> OmniSharpRename<cr>
" nnoremap <F2> :OmniSharpRename<cr>
" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

" Force OmniSharp to reload the solution. Useful when switching branches etc.
nnoremap <leader>rl :OmniSharpReloadSolution<cr>
nnoremap <leader>cf :OmniSharpCodeFormat<cr>
" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>

" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
nnoremap <leader>ss :OmniSharpStartServer<cr>
nnoremap <leader>sq :OmniSharpStopServer<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>
"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
set hidden

function! SLADeploy()
	call system('c:\progra~2\MSBuild\12.0\Bin\msbuild.exe /nologo /clp:Verbosity=quiet /p:GenerateFullPaths=true /p:DeployOnBuild=true /p:PublishProfile=test .\SLAManagementSystem.sln')
endfunction

""" omnisharp test end
" Gitgutter
let g:gitgutter_enabled = 0

" Togglelist
let g:toggle_list_copen_command="Copen"

" winresizer
let g:winresizer_start_key='<C-T>'

" fugitive
autocmd FileType gitcommit setlocal nofoldenable

" nerdtree
map <leader>P :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 40 
let g:NERDTreeShowLineNumbers=1

" madsen leader
map <leader>c :call ToggleColorColumn()<CR> " Esc+c=toggle color column
map <leader>h :nohl <CR> 
map <leader>gs :Gstatus <CR> 
map <leader>gw :Gwrite <CR> 
map <leader>gd :GDiff <CR> 

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  "let g:ctrlp_use_caching = 0 no it's not
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

nnoremap \ :Ag<SPACE>
