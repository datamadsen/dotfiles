set nocompatible

" use comma as leader.
let mapleader = ","

" General
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Plugin 'gmarik/vundle.git'
Plugin 'sjl/gundo.vim.git'                       "Undo history.
Plugin 'scrooloose/nerdtree.git'                 "File browser
Plugin 'groenewege/vim-less.git'                 "Syntax, indent, completion
Plugin 'sirver/UltiSnips.git'                    "Snippets.
Plugin 'jakar/vim-json.git'                      "Syntax, indent for json
Plugin 'tmadsen/xmledit.git'                      "Edit XML; includes tag completion and tag jumping
Plugin 'aaronj1335/underscore-templates.vim.git' "Syntax highlighting for underscore.js templates
Plugin 'pangloss/vim-javascript.git'             "Syntax and indent for javascript
Plugin 'kien/ctrlp.vim.git'                      "Fuzzy finder
Plugin 'heavenshell/vim-jsdoc.git'               "Generates JSDoc block comments based on a function signature
Plugin 'junegunn/vim-easy-align.git'             "Easy alignment
"Plugin 'scrooloose/nerdcommenter.git'            "Comment/uncomment lines
Plugin 'tpope/vim-commentary'					           "Let's try a tpope plugin for this
Plugin 'majutsushi/tagbar.git'                   "Class/member overview
Plugin 'airblade/vim-gitgutter.git'              "Git diffs in gutter (SignColumn)
Plugin 'tpope/vim-fugitive.git'                  "Git wrapper
Plugin 'jiangmiao/auto-pairs.git'                "Insert or delete brackets, parens, quotes in pairs.
Plugin 'scrooloose/syntastic.git'                "Syntax checking
Plugin 'datamadsen/dm-snippets.git'              "The snippets I use for UltiSnips
Plugin 'altercation/vim-colors-solarized.git'    "Solarized Colorscheme for Vim
Plugin 'christoomey/vim-tmux-navigator'          "Navigate tmux panes and vim splits seamlessly
Plugin 'vim-ruby/vim-ruby'                       "Lots of very nice stuff for ruby
Plugin 'tpope/vim-rails'                         "RoR power tools
Plugin 'nelstrom/vim-markdown-folding'           "Markdown folding
Plugin 'tpope/vim-surround'                      "Easily surround with or change tags
Plugin 'tpope/vim-endwise'                       "Wisely add 'end' in ruby, endfunction/endif/more in vim script, etc
Plugin 'Valloric/YouCompleteMe'
Plugin 'danchoi/ri.vim'                          "browse ri documentation from Vim
Plugin 'tpope/vim-rvm'
Plugin 'dhruvasagar/vim-table-mode' 
Plugin 'tpope/vim-ragtag'
 
call vundle#end()
filetype plugin indent on

syntax on " syntax highlighting on

set history=100
set ffs=unix,dos,mac " support all three, in this order
set viminfo+=! " make sure it can save viminfo

" Theme/Colors
if has("gui_running")
    set guioptions-=T " remove toolbar
    set guioptions-=r " remove right-hand-side scrollbar
    set guioptions-=L " remove left-hand-side scrollbar
    set guioptions-=m " remove menu
    set guifont=Consolas:h16
else
    set t_Co=256
endif
let hour = strftime("%H") " Set the background light from 7am to 7pm
if 7 <= hour && hour < 19
  set background=light
else " Set to dark from 7pm to 7am
  set background=dark
endif
colorscheme solarized

" Vim UI
set scrolloff=99 " keep cursor in the middle when possible.
set linespace=1
set wildmenu
set ruler
set cmdheight=1
set number
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set splitbelow

" Visual Cues
set showmatch " show matching '(' '{' '[' etc.
set mat=2
set incsearch
set novisualbell
set laststatus=2
set hlsearch
set colorcolumn=81
set diffopt+=vertical
set statusline=
set statusline=%F\ "full filepath
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" Initial colors for visual indicator lines on screen
hi StatusLine  ctermbg=white  ctermfg=green
hi LineNr      ctermbg=green  ctermfg=white
hi ColorColumn ctermbg=green  ctermfg=white

" Blue lines in insert mode
au InsertEnter * hi StatusLine  ctermbg=white ctermfg=blue
au InsertEnter * hi LineNr      ctermbg=blue  ctermfg=white
au InsertEnter * hi ColorColumn ctermbg=blue  ctermfg=white

" Green lines in normal mode
au InsertLeave * hi StatusLine  ctermbg=white  ctermfg=green
au InsertLeave * hi LineNr      ctermbg=green  ctermfg=white
au InsertLeave * hi ColorColumn ctermbg=green  ctermfg=white

" Unfold files when opening them.
au BufRead * normal zR

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction

" Rename tmux window to filename.
"autocmd BufReadPost,BufEnter,FileReadPost,BufNewFile * call system("tmux rename-window " . expand("%"))

" Text Formatting/Layout
set fo=tcrqn
set autoindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set noexpandtab
set nowrap
set textwidth=79

" Misc.
set ignorecase
set foldmethod=syntax
set completeopt=menuone

" Should turn of esc-key delay:
set noesckeys
set ttimeout
set ttimeoutlen=1

" Run shell script being edited.
autocmd FileType sh nmap <leader>r :!./%<CR> 

" Remap commands that I mistype
command! W w
command! Wq wq
command! Q q
command! Qa qa

" Use <Esc> a bit
map <Esc>w :w<CR>
map <Esc><Esc> :w<CR>
map <Esc>h :nohl<CR>

let g:oldColorColumn = 0
function! ToggleColorColumn()
	if &colorcolumn > '0'
		let g:oldColorColumn=&colorcolumn
		let &colorcolumn=0
	else
		let &colorcolumn=g:oldColorColumn
	endif
endfunction
map <Esc>c :call ToggleColorColumn()<CR>

map <Esc>t :TagbarToggle<CR>
map <Esc>p :NERDTreeToggle<CR>

" Strip trailing whitespace on certain file types upon write.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType javascript,html autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsSnippetsDir="~/.vim/bundle/dm-snippets/UltiSnips"
let g:UltiSnipsEditSplit="horizontal"

" Better window movement
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>

" Might turn out to be a bad idea since it overrides other mapprings wrt.
" windows. See:
"		* help CTRL-W_bar
"		* help CTRL-W_-
noremap <silent> <C-w>\| :wincmd v<CR>
noremap <silent> <C-w>- :wincmd s<CR>

" Faster go-to-line
nnoremap <CR> G

" XMlEdit
let g:xmledit_enable_html=1

" tern-for-vim, javascript mappings
autocmd FileType javascript nmap <silent> <leader>d :TernDoc<CR>
autocmd FileType javascript nmap <silent> <leader>b :TernDocBrowse<CR>
autocmd FileType javascript nmap <silent> <leader>r :TernRename<CR>
autocmd FileType javascript nmap <silent> <leader>u :TernRefs<CR>
autocmd FileType javascript nmap <silent> <leader>t :TernType<CR>
autocmd FileType javascript nmap <silent> <leader>g :TernDef<CR>
"let g:tern_show_argument_hints='on_move'
let g:tern_show_signature_in_pum=1

" js-eol
let g:jseol#trigger="<leader>e"

" Use ag.
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" easy-align.
let g:easy_align_ignore_groups=[]
vmap <Enter> <Plug>(EasyAlign)

"ctrlp
map <leader>p :CtrlPBuffer<CR>
map <leader>. :CtrlPBufTag<CR>
map <leader>, :CtrlPTag<CR>
let g:ctrlp_custom_ignore = 'git\|hg\|svn\|node_modules\|_build'

" delimit-mate
let g:delimitMate_expand_cr = 1

" Nicer pum color
highlight Pmenu ctermbg=238

" syntastic
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }

" jsdoc
let g:jsdoc_default_mapping=0 " Don't map <C-l> automatically.

" autopairs
let g:AutoPairsShortcutFastWrap = '' " If this is not here, we can't write Ã¥.
let g:AutoPairsFlyMode = 1

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_use_bundler = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_load_gemfile = 1
"let g:rubycomplete_rails = 1
set tags+=gems.tags

" vim-table-mode
let g:table_mode_corner_corner="+"
let g:table_mode_header_fillchar="="

" indentation on newline between html tags
function! NewlineInTag()
    let lnum = getline('.')
    let cnum = col('.')

    let chars = strpart(lnum, cnum - 2, 3)
    if chars =~ '></'
        return "\<CR>\<ESC>\<UP>$o"
    else
        return "\<CR>"
    endif
endfunction
autocmd FileType eruby,html imap <CR> <C-R>=NewlineInTag()<CR>
